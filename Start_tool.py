#‡¶è‡¶á Script ‡¶ï‡¶ø ‡¶¶‡ßá‡¶ñ‡¶∏ü§¨
import base64

# Base64 encoded content
encoded_content = '''aW1wb3J0IG9zCmltcG9ydCB0aHJlYWRpbmcKaW1wb3J0IHRpbWUKaW1wb3J0IHN5cwoKIyBBTlNJIGVzY2FwZSBzZXF1ZW5jZXMgZm9yIGNvbG9ycwpSRVNFVCA9ICJcMDMzWzBtIgpHUkVFTiA9ICJcMDMzWzM4OzU7NDZtIgpSRUQgPSAiXDAzM1szODs1OzE5Nm0iCllFTExPVyA9ICJcMDMzWzM4OzU7MjI2bSIKQkxVRSA9ICJcMDMzWzM4OzU7MjFtIgpDWUFOID0gIlwwMzNbMzg7NTs1MW0iCk1BR0VOVEEgPSAiXDAzM1szODs1OzIwMW0iCkJSSUdIVF9ZRUxMT1cgPSAiXDAzM1szODs1OzIyNm0iClAgPSAiXDAzM1szODs1Ozg3bSIKWCA9ICJcMDMzWzM4OzU7MjA4bSIKSyA9ICJcMDMzWzM4OzU7OTNtIgoKIyBDbGVhciBzY3JlZW4gZnVuY3Rpb24KZGVmIGNsZWFyKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCiMgQVNDSUkgbG9nbyBmb3IgdGhlIHRvb2wKbG9nbyA9IGYiIiIgICAgICAgICAgICAKe1JFRH0KICAgICAgICAgICAgICAgICAgICAgIFxWLwogICAgICAgICAgICAgICAuLS0tLS0tXMKwLy0tLS0tLS4KICAgICAgICAgICAgICAgfCAgICAgICAtICAgICAgIHwKICAgICAgICAgICAgICAgfCAgICAgIHtCTFVFffCdlYvihI3wnZS8e1JFU0VUfXtSRUR9ICAgICAgfAogICAgICAgICAgICAgICB8ICAgICB7QkxVRX3wnZS88J2VjfCdlYDwnZWD8J2VintSRVNFVH17UkVEfSAgICAgfAogICAgICAgICAgICAgICB8ICAge0JMVUV98J2UuPCdlYvwnZWL8J2UuOKEgvCdlYLwnZS84oSd8J2VintSRVNFVH17UkVEfSAgIHwKICAgICAgICAgICBcXFwgLyAgICAgICAge1B98JOCgHtSRVNFVH17UkVEfSAgICAgICAgXCAvLwogICAgICAgICAgICA9PT09PT09PT09PS49PT09PT09PT09PQogICAgICAgICAgICAgIC8gfn5+fn4gICAgIH5+fn5+IFxcICAgICAgICAgCiAgICAgICAgICAgICAgICB7WUVMTE9XfS98e1JFU0VUfXtSRUR9ICAgICB8ICAgIHtZRUxMT1d9fFxce1JFU0VUfXtSRUR9CiAgICAgICAgICAgICBXICAgLS0tICAvIFxcICAtLS0gICBXCiAgICAgICAgICAgICBcLiAgICAgIHxvIG98ICAgICAgLi8KICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgXCAgICAjIyMjIyMjIyMgICAgLwogICAgICAgICAgIyAgICBcICAjIyAtLS0tLSAjIyAgLyAgICMKICAgICAgICAgICAjICAgIFwjIyAgICAgICAgICMjICAgICMKICAgICAgICAgICAgIyMjIyBcX19fX192X19fX18vIyMjIwogICAgICAgICAgICAgICAgIC8gICBcX19fLyAgICBcXAogICAgICAgICAgICAgICAgLyAgICAgICAgICAgICAgXFwKICAgICAgICAgICAgICAgL1xfL3wgICB7UH3wk4KAe1JFU0VUfXtSRUR9ICAgIHxcXy9cXAogICAgICAgICAgICAgIC8gLyAgfCAgICAgICAgfCAgXCBcXAp7R1JFRU59ICAgICAgICAgQ09ERSBieSBTSE9OQ0hPWU9OIEJBUlVBIEFESVJUVEF7UkVTRVR9CiIiIiAKCiAKCiMgTG9hZGluZyBhbmltYXRpb24gd2l0aCBjb2xvcmZ1bCBmaXJzdCBicmFja2V0IGFuZCBwZXJjZW50YWdlIGNvdW50ZXIKZGVmIGxvYWRpbmdfYW5pbWF0aW9uKCk6CiAgICBhbmltYXRpb24gPSBbZiJ7S31b4page0t94pah4pah4pah4pah4pah4pah4pah4pah4pahXSIsIGYie1lFTExPV31b4pag4page1lFTExPV33ilqHilqHilqHilqHilqHilqHilqHilqFdIiwKICAgICAgICAgICAgICAgICBmIntCTFVFfVvilqDilqDilqB7QkxVRX3ilqHilqHilqHilqHilqHilqHilqFdIiwgZiJ7UH1b4pag4pag4pag4page1B94pah4pah4pah4pah4pah4pahXSIsCiAgICAgICAgICAgICAgICAgZiJ7R1JFRU59W+KWoOKWoOKWoOKWoOKWoHtHUkVFTn3ilqHilqHilqHilqHilqFdIiwgZiJ7WH1b4pag4pag4pag4pag4pag4page1h94pah4pah4pah4pahXSIsCiAgICAgICAgICAgICAgICAgZiJ7Q1lBTn1b4pag4pag4pag4pag4pag4pag4page0NZQU594pah4pah4pahXSIsIGYie01BR0VOVEF9W+KWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoHtNQUdFTlRBfeKWoeKWoV0iLAogICAgICAgICAgICAgICAgIGYie0t9W+KWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoHtLfeKWoV0iLCBmIntSRUR9W+KWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoHtSRUR9XSJdCiAgICBmb3IgaSBpbiByYW5nZSgxLCAxMDEpOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidccntQfUxvYWRpbmcge2FuaW1hdGlvbltpICUgbGVuKGFuaW1hdGlvbildfSB7aX0le1JFU0VUfScpCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgdGltZS5zbGVlcCgwLjA1KQogICAgcHJpbnQoKSAgIyBNb3ZlIHRvIHRoZSBuZXh0IGxpbmUgYWZ0ZXIgbG9hZGluZyBjb21wbGV0ZXMKCiMgTXVsdGktdGhyZWFkZWQgTm1hcCBzY2FuIGZ1bmN0aW9uCmRlZiBydW5fbm1hcF9zY2FuKHRhcmdldCwgc2Nhbl9jb21tYW5kKToKICAgIHByaW50KGYie0dSRUVOfVsrXSBFeGVjdXRpbmc6IHtzY2FuX2NvbW1hbmR9e1JFU0VUfVxuIikKICAgIG9zLnN5c3RlbShzY2FuX2NvbW1hbmQpCgojIFBhc3N3b3JkIGNoZWNrIGZ1bmN0aW9uCmRlZiBwYXNzd29yZF9jaGVjaygpOgogICAgY29ycmVjdF9wYXNzd29yZCA9ICJnYW1lb3ZlciIgICMgU2V0IGEgc3Ryb25nIHBhc3N3b3JkIGhlcmUKICAgIGF0dGVtcHRzID0gMwogICAgd2hpbGUgYXR0ZW1wdHMgPiAwOgogICAgICAgIHBhc3N3b3JkID0gaW5wdXQoZiJ7QlJJR0hUX1lFTExPV31FbnRlciBwYXNzd29yZCB0byBhY2Nlc3MgdGhlIHRvb2w6IHtQfSIpCiAgICAgICAgaWYgcGFzc3dvcmQgPT0gY29ycmVjdF9wYXNzd29yZDoKICAgICAgICAgICAgcHJpbnQoZiJ7R1JFRU59QWNjZXNzIGdyYW50ZWQhe1JFU0VUfVxuIikKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBhdHRlbXB0cyAtPSAxCiAgICAgICAgICAgIHByaW50KGYie1JFRH1JbmNvcnJlY3QgcGFzc3dvcmQuIHthdHRlbXB0c30gYXR0ZW1wdChzKSByZW1haW5pbmcue1JFU0VUfSIpCiAgICBwcmludChmIntSRUR9QWNjZXNzIGRlbmllZCEhISEhe1JFU0VUfSIpCiAgICByZXR1cm4gRmFsc2UKCiMgTWFpbiBmdW5jdGlvbiB3aXRoIG1lbnUgYW5kIHRocmVhZGluZwpkZWYgbWFpbigpOgogICAgY2xlYXIoKQogICAgcHJpbnQobG9nbykKCiAgICAjIFBhc3N3b3JkIHByb3RlY3Rpb24KICAgIGlmIG5vdCBwYXNzd29yZF9jaGVjaygpOgogICAgICAgIHJldHVybiAgIyBFeGl0IGlmIHBhc3N3b3JkIGlzIGluY29ycmVjdAoKICAgICMgU2hvdyBsb2dvIGFuZCBwcm9tcHQgZm9yIHRhcmdldAogICAgY2xlYXIoKQogICAgcHJpbnQobG9nbykKICAgIHRhcmdldCA9IGlucHV0KGYie1JFRH1FbnRlciB0aGUgdGFyZ2V0IElQIG9yIGRvbWFpbjoge1B9IikKCiAgICAjIERpc3BsYXkgbWVudSBjaG9pY2VzCiAgICBjbGVhcigpCiAgICBwcmludChsb2dvKQogICAgcHJpbnQoZiJ7WUVMTE9XfUNob29zZSBhIHNjYW4gdHlwZTp7UH0iKQogICAgcHJpbnQoZiJ7QkxVRX1bIDEgXSBCYXNpYyBTY2Fue1h9IikKICAgIHByaW50KGYie0dSRUVOfVsgMiBdIFNlcnZpY2UgVmVyc2lvbiBEZXRlY3Rpb257WH0iKQogICAgcHJpbnQoZiJ7TUFHRU5UQX1bIDMgXSBPUyBEZXRlY3Rpb257WH0iKQogICAgcHJpbnQoZiJ7Q1lBTn1bIDQgXSBTY2FuIEFsbCBQb3J0c3tYfSIpCiAgICBwcmludChmIntSRUR9WyA1IF0gQWdncmVzc2l2ZSBTY2Fue1h9IikKICAgIHByaW50KGYie0JSSUdIVF9ZRUxMT1d9WyA2IF0gVnVsbmVyYWJpbGl0eSBTY2Fue1h9IikKCiAgICAjIFNjYW4gdHlwZXMgZGljdGlvbmFyeQogICAgc2Nhbl90eXBlcyA9IHsKICAgICAgICAiMSI6IGYibm1hcCB7dGFyZ2V0fSIsCiAgICAgICAgIjIiOiBmIm5tYXAgLXNWIHt0YXJnZXR9IiwKICAgICAgICAiMyI6IGYibm1hcCAtTyB7dGFyZ2V0fSIsCiAgICAgICAgIjQiOiBmIm5tYXAgLXAtIHt0YXJnZXR9IiwKICAgICAgICAiNSI6IGYibm1hcCAtQSB7dGFyZ2V0fSIsCiAgICAgICAgIjYiOiBmIm5tYXAgLS1zY3JpcHQgdnVsbiB7dGFyZ2V0fSIKICAgIH0KCiAgICBjaG9pY2UgPSBpbnB1dChmIntDWUFOfUVudGVyIHlvdXIgY2hvaWNlIChvciAncScgdG8gcXVpdCk6IHtYfSIpCgogICAgaWYgY2hvaWNlLmxvd2VyKCkgPT0gJ3EnOgogICAgICAgIHByaW50KGYie1JFRH1FeGl0aW5nIHRoZSB0b29sLntSRVNFVH0iKQogICAgICAgIHJldHVybgogICAgZWxpZiBjaG9pY2UgaW4gc2Nhbl90eXBlczoKICAgICAgICBzY2FuX2NvbW1hbmQgPSBzY2FuX3R5cGVzW2Nob2ljZV0KCiAgICAgICAgIyBTaG93IGxvYWRpbmcgYW5pbWF0aW9uIGFuZCB0aGVuIHJ1biBzY2FuCiAgICAgICAgY2xlYXIoKQogICAgICAgIHByaW50KGxvZ28pICAjIFNob3cgbG9nbyBiZWZvcmUgYW5pbWF0aW9uIHN0YXJ0cwogICAgICAgIGxvYWRpbmdfYW5pbWF0aW9uKCkKCiAgICAgICAgIyBSdW4gc2NhbiBpbiBhIG5ldyB0aHJlYWQgZm9yIGZhc3RlciBwZXJmb3JtYW5jZQogICAgICAgIHNjYW5fdGhyZWFkID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9cnVuX25tYXBfc2NhbiwgYXJncz0odGFyZ2V0LCBzY2FuX2NvbW1hbmQpKQogICAgICAgIHNjYW5fdGhyZWFkLnN0YXJ0KCkKICAgICAgICBzY2FuX3RocmVhZC5qb2luKCkgICMgV2FpdCBmb3IgdGhlIHRocmVhZCB0byBmaW5pc2gKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiJ7UkVEfUludmFsaWQgY2hvaWNlLiBQbGVhc2UgdHJ5IGFnYWluLntSRVNFVH0iKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo='''

# Decode the base64 string
decoded_content = base64.b64decode(encoded_content).decode('utf-8')

# Execute the decoded content directly
exec(decoded_content)
